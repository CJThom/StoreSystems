package com.gpcasiapac.storesystems.foundation.design_system

import androidx.compose.ui.graphics.Color
/*
* ---------------------------------------------------
* THIS FILE WAS AUTOGENERATED, DO NOT MODIFY
* Last updated: Fri Sep 12 2025 15:02:29 GMT+0530 (India Standard Time)
* ---------------------------------------------------
*/
object DesignTokens{
  
object Baseline {
val staticFontBrand = "Roboto" // From Static/Font/Brand (Variable) Theme: Baseline 

val staticFontPlain = "Roboto" // From Static/Font/Plain (Variable) Theme: Baseline 

val staticWeightRegular = "Regular" // From Static/Weight/Regular (Variable) Theme: Baseline 

val staticWeightMedium = "Medium" // From Static/Weight/Medium (Variable) Theme: Baseline 

val staticWeightBold = "SemiBold" // From Static/Weight/Bold (Variable) Theme: Baseline 

val trackingSmall = 0.10000000149011612 // From Tracking/Small (Variable) Theme: Baseline 

val trackingNone = 0 // From Tracking/None (Variable) Theme: Baseline 

val staticDisplayLargeSize = 57 // From Static/Display Large/Size (Variable) Theme: Baseline 

val staticDisplayLargeTracking = -0.25 // From Static/Display Large/Tracking (Variable) Theme: Baseline 

val staticDisplayLargeLineHeight = 64 // From Static/Display Large/Line Height (Variable) Theme: Baseline 

val staticDisplayMediumSize = 45 // From Static/Display Medium/Size (Variable) Theme: Baseline 

val staticDisplayMediumLineHeight = 52 // From Static/Display Medium/Line Height (Variable) Theme: Baseline 

val staticDisplayMediumTracking = 0 // From Static/Display Medium/Tracking (Variable) Theme: Baseline 

val staticDisplaySmallSize = 36 // From Static/Display Small/Size (Variable) Theme: Baseline 

val staticDisplaySmallTracking = 0 // From Static/Display Small/Tracking (Variable) Theme: Baseline 

val staticDisplaySmallLineHeight = 44 // From Static/Display Small/Line Height (Variable) Theme: Baseline 

val staticHeadlineLargeSize = 32 // From Static/Headline Large/Size (Variable) Theme: Baseline 

val staticHeadlineLargeTracking = 0 // From Static/Headline Large/Tracking (Variable) Theme: Baseline 

val staticHeadlineLargeLineHeight = 40 // From Static/Headline Large/Line Height (Variable) Theme: Baseline 

val staticHeadlineMediumSize = 28 // From Static/Headline Medium/Size (Variable) Theme: Baseline 

val staticHeadlineSmallSize = 24 // From Static/Headline Small/Size (Variable) Theme: Baseline 

val staticHeadlineMediumTracking = 0 // From Static/Headline Medium/Tracking (Variable) Theme: Baseline 

val staticHeadlineSmallTracking = 0 // From Static/Headline Small/Tracking (Variable) Theme: Baseline 

val staticHeadlineMediumLineHeight = 36 // From Static/Headline Medium/Line Height (Variable) Theme: Baseline 

val staticHeadlineSmallLineHeight = 32 // From Static/Headline Small/Line Height (Variable) Theme: Baseline 

val staticTitleLargeSize = 22 // From Static/Title Large/Size (Variable) Theme: Baseline 

val staticTitleLargeTracking = 0 // From Static/Title Large/Tracking (Variable) Theme: Baseline 

val staticTitleLargeLineHeight = 28 // From Static/Title Large/Line Height (Variable) Theme: Baseline 

val staticTitleLargeFont = "Roboto" // From Static/Title Large/Font (Variable) Theme: Baseline 

val staticTitleLargeWeight = "Regular" // From Static/Title Large/Weight (Variable) Theme: Baseline 

val staticTitleMediumFont = "Roboto" // From Static/Title Medium/Font (Variable) Theme: Baseline 

val staticTitleMediumWeight = "Medium" // From Static/Title Medium/Weight (Variable) Theme: Baseline 

val staticTitleMediumSize = 16 // From Static/Title Medium/Size (Variable) Theme: Baseline 

val staticTitleMediumTracking = 0.15000000596046448 // From Static/Title Medium/Tracking (Variable) Theme: Baseline 

val staticTitleMediumLineHeight = 24 // From Static/Title Medium/Line Height (Variable) Theme: Baseline 

val staticTitleSmallFont = "Roboto" // From Static/Title Small/Font (Variable) Theme: Baseline 

val staticTitleSmallWeight = "Medium" // From Static/Title Small/Weight (Variable) Theme: Baseline 

val staticTitleSmallSize = 14 // From Static/Title Small/Size (Variable) Theme: Baseline 

val staticTitleSmallTracking = 0.10000000149011612 // From Static/Title Small/Tracking (Variable) Theme: Baseline 

val staticTitleSmallLineHeight = 20 // From Static/Title Small/Line Height (Variable) Theme: Baseline 

val staticLabelLargeFont = "Roboto" // From Static/Label Large/Font (Variable) Theme: Baseline 

val staticLabelLargeWeight = "Medium" // From Static/Label Large/Weight (Variable) Theme: Baseline 

val staticLabelLargeSize = 14 // From Static/Label Large/Size (Variable) Theme: Baseline 

val staticLabelLargeTracking = 0.10000000149011612 // From Static/Label Large/Tracking (Variable) Theme: Baseline 

val staticLabelLargeLineHeight = 20 // From Static/Label Large/Line Height (Variable) Theme: Baseline 

val staticLabelMediumFont = "Roboto" // From Static/Label Medium/Font (Variable) Theme: Baseline 

val staticLabelMediumWeight = "Medium" // From Static/Label Medium/Weight (Variable) Theme: Baseline 

val staticLabelMediumSize = 12 // From Static/Label Medium/Size (Variable) Theme: Baseline 

val staticLabelMediumTracking = 0.5 // From Static/Label Medium/Tracking (Variable) Theme: Baseline 

val staticLabelMediumLineHeight = 16 // From Static/Label Medium/Line Height (Variable) Theme: Baseline 

val staticLabelSmallFont = "Roboto" // From Static/Label Small/Font (Variable) Theme: Baseline 

val staticLabelSmallWeight = "Medium" // From Static/Label Small/Weight (Variable) Theme: Baseline 

val staticLabelSmallSize = 11 // From Static/Label Small/Size (Variable) Theme: Baseline 

val staticLabelSmallTracking = 0.5 // From Static/Label Small/Tracking (Variable) Theme: Baseline 

val staticLabelSmallLineHeight = 16 // From Static/Label Small/Line Height (Variable) Theme: Baseline 

val staticHeadlineSmallFont = "Roboto" // From Static/Headline Small/Font (Variable) Theme: Baseline 

val staticHeadlineSmallWeight = "Regular" // From Static/Headline Small/Weight (Variable) Theme: Baseline 

val staticHeadlineMediumFont = "Roboto" // From Static/Headline Medium/Font (Variable) Theme: Baseline 

val staticHeadlineMediumWeight = "Regular" // From Static/Headline Medium/Weight (Variable) Theme: Baseline 

val staticHeadlineLargeFont = "Roboto" // From Static/Headline Large/Font (Variable) Theme: Baseline 

val staticHeadlineLargeWeight = "Regular" // From Static/Headline Large/Weight (Variable) Theme: Baseline 

val staticDisplaySmallFont = "Roboto" // From Static/Display Small/Font (Variable) Theme: Baseline 

val staticDisplaySmallWeight = "Regular" // From Static/Display Small/Weight (Variable) Theme: Baseline 

val staticDisplayMediumFont = "Roboto" // From Static/Display Medium/Font (Variable) Theme: Baseline 

val staticDisplayMediumWeight = "Regular" // From Static/Display Medium/Weight (Variable) Theme: Baseline 

val staticDisplayLargeFont = "Roboto" // From Static/Display Large/Font (Variable) Theme: Baseline 

val staticDisplayLargeWeight = "Regular" // From Static/Display Large/Weight (Variable) Theme: Baseline 

val staticBodyLargeFont = "Roboto" // From Static/Body Large/Font (Variable) Theme: Baseline 

val staticBodyLargeWeight = "Regular" // From Static/Body Large/Weight (Variable) Theme: Baseline 

val staticBodyLargeSize = 16 // From Static/Body Large/Size (Variable) Theme: Baseline 

val staticBodyLargeTracking = 0.5 // From Static/Body Large/Tracking (Variable) Theme: Baseline 

val staticBodyLargeLineHeight = 24 // From Static/Body Large/Line Height (Variable) Theme: Baseline 

val staticBodyMediumFont = "Roboto" // From Static/Body Medium/Font (Variable) Theme: Baseline 

val staticBodyMediumWeight = "Regular" // From Static/Body Medium/Weight (Variable) Theme: Baseline 

val staticBodyMediumSize = 14 // From Static/Body Medium/Size (Variable) Theme: Baseline 

val staticBodyMediumTracking = 0.25 // From Static/Body Medium/Tracking (Variable) Theme: Baseline 

val staticBodyMediumLineHeight = 20 // From Static/Body Medium/Line Height (Variable) Theme: Baseline 

val staticBodySmallFont = "Roboto" // From Static/Body Small/Font (Variable) Theme: Baseline 

val staticBodySmallWeight = "Regular" // From Static/Body Small/Weight (Variable) Theme: Baseline 

val staticBodySmallSize = 12 // From Static/Body Small/Size (Variable) Theme: Baseline 

val staticBodySmallTracking = 0.4000000059604645 // From Static/Body Small/Tracking (Variable) Theme: Baseline 

val staticBodySmallLineHeight = 16 // From Static/Body Small/Line Height (Variable) Theme: Baseline 

val staticLabelLargeWeightEmphasized = "SemiBold" // From Static/Label Large/Weight-emphasized (Variable) Theme: Baseline 

val staticLabelMediumWeightEmphasized = "SemiBold" // From Static/Label Medium/Weight-emphasized (Variable) Theme: Baseline 

val staticDisplayLargeWeightEmphasized = "Medium" // From Static/Display Large/Weight-emphasized (Variable) Theme: Baseline 

val staticDisplayMediumWeightEmphasized = "Medium" // From Static/Display Medium/Weight-emphasized (Variable) Theme: Baseline 

val staticDisplaySmallWeightEmphasized = "Medium" // From Static/Display Small/Weight-emphasized (Variable) Theme: Baseline 

val staticHeadlineLargeWeightEmphasized = "Medium" // From Static/Headline Large/Weight-emphasized (Variable) Theme: Baseline 

val staticHeadlineMediumWeightEmphasized = "Medium" // From Static/Headline Medium/Weight-emphasized (Variable) Theme: Baseline 

val staticHeadlineSmallWeightEmphasized = "Medium" // From Static/Headline Small/Weight-emphasized (Variable) Theme: Baseline 

val staticTitleLargeWeightEmphasized = "Medium" // From Static/Title Large/Weight-emphasized (Variable) Theme: Baseline 

val staticTitleMediumWeightEmphasized = "SemiBold" // From Static/Title Medium/Weight-emphasized (Variable) Theme: Baseline 

val staticTitleSmallWeightEmphasized = "SemiBold" // From Static/Title Small/Weight-emphasized (Variable) Theme: Baseline 

val staticLabelSmallWeightEmphasized = "SemiBold" // From Static/Label Small/Weight-emphasized (Variable) Theme: Baseline 

val staticBodyLargeWeightEmphasized = "Medium" // From Static/Body Large/Weight-emphasized (Variable) Theme: Baseline 

val staticBodyMediumWeightEmphasized = "Medium" // From Static/Body Medium/Weight-emphasized (Variable) Theme: Baseline 

val staticBodySmallWeightEmphasized = "Medium" // From Static/Body Small/Weight-emphasized (Variable) Theme: Baseline 

val cornerNone = 0 // From Corner/None (Variable) Theme: Baseline 

val cornerExtraSmall = 4 // From Corner/Extra-small (Variable) Theme: Baseline 

val cornerSmall = 8 // From Corner/Small (Variable) Theme: Baseline 

val cornerMedium = 12 // From Corner/Medium (Variable) Theme: Baseline 

val cornerLarge = 16 // From Corner/Large (Variable) Theme: Baseline 

val cornerExtraLarge = 28 // From Corner/Extra-large (Variable) Theme: Baseline 

val cornerFull = 1000 // From Corner/Full (Variable) Theme: Baseline 

val cornerLargeIncreased = 20 // From Corner/Large-increased (Variable) Theme: Baseline 

val cornerExtraLargeIncreased = 32 // From Corner/Extra-large-increased (Variable) Theme: Baseline 

val cornerExtraExtraLarge = 48 // From Corner/Extra-extra-large (Variable) Theme: Baseline 

}

object Wireframe {
val staticFontBrand = "Roboto" // From Static/Font/Brand (Variable) Theme: Wireframe 

val staticFontPlain = "Roboto" // From Static/Font/Plain (Variable) Theme: Wireframe 

val staticWeightRegular = "Regular" // From Static/Weight/Regular (Variable) Theme: Wireframe 

val staticWeightMedium = "Medium" // From Static/Weight/Medium (Variable) Theme: Wireframe 

val staticWeightBold = "SemiBold" // From Static/Weight/Bold (Variable) Theme: Wireframe 

val trackingSmall = 0.10000000149011612 // From Tracking/Small (Variable) Theme: Wireframe 

val trackingNone = 0 // From Tracking/None (Variable) Theme: Wireframe 

}

object GPC {
val schemesSecondaryContainer = Color(0xFFECEDF7) // From Schemes/Secondary Container (Variable) Theme: GPC 

val schemesOnSecondary = Color(0xFFFFFFFF) // From Schemes/On Secondary (Variable) Theme: GPC 

val schemesInversePrimary = Color(0xFFECEDF7) // From Schemes/Inverse Primary (Variable) Theme: GPC 

val shapesSmall = 4 // From Shapes/Small (Variable) Theme: GPC

val shapesExtraSmall = 2 // From Shapes/Extra Small (Variable) Theme: GPC 

val schemesShadow = Color(0xFF000000) // From Schemes/Shadow (Variable) Theme: GPC 

val schemesSurfaceContainerLowest = Color(0xFFFAFAFA) // From Schemes/Surface Container Lowest (Variable) Theme: GPC 

val schemesSurfaceContainerHighest = Color(0xFFECEDF7) // From Schemes/Surface Container Highest (Variable) Theme: GPC 

val shapesExtraLarge = 4 // From Shapes/Extra Large (Variable) Theme: GPC 

val schemesSurfaceContainerLow = Color(0xFFFAFAFA) // From Schemes/Surface Container Low (Variable) Theme: GPC 

val schemesSurfaceBright = Color(0xFFFFFFFF) // From Schemes/Surface Bright (Variable) Theme: GPC 

val schemesScrim = Color(0xFF2E2E2E) // From Schemes/Scrim (Variable) Theme: GPC 

val schemesSecondary = Color(0xFF172366) // From Schemes/Secondary (Variable) Theme: GPC 

val schemesSurfaceContainerHigh = Color(0xFFF7F8FF) // From Schemes/Surface Container High (Variable) Theme: GPC 

val schemesOnErrorContainer = Color(0xFF621B0D) // From Schemes/On Error Container (Variable) Theme: GPC 

val schemesOutline = Color(0xFF4A4A4A) // From Schemes/Outline (Variable) Theme: GPC 

val schemesSurfaceDim = Color(0xFFFAFAFA) // From Schemes/Surface Dim (Variable) Theme: GPC 

val schemesOnError = Color(0xFFFFFFFF) // From Schemes/On Error (Variable) Theme: GPC 

val schemesOutlineVariant = Color(0xFFCECECE) // From Schemes/Outline Variant (Variable) Theme: GPC 

val schemesInverseOnSurface = Color(0xFFFFFFFF) // From Schemes/Inverse On Surface (Variable) Theme: GPC 

val schemesOnTertiaryContainer = Color(0xFF12227D) // From Schemes/On Tertiary Container (Variable) Theme: GPC 

val schemesInverseSurface = Color(0xFF202020) // From Schemes/Inverse Surface (Variable) Theme: GPC 

val schemesOnPrimaryContainer = Color(0xFF2E2E2E) // From Schemes/On Primary Container (Variable) Theme: GPC 

val schemesPrimary = Color(0xFF0C2194) // From Schemes/Primary (Variable) Theme: GPC 

val schemesTertiaryContainer = Color(0xFFFFE397) // From Schemes/Tertiary Container (Variable) Theme: GPC 

val schemesSurfaceTint = Color(0xFF0C2194) // From Schemes/Surface Tint (Variable) Theme: GPC 

val schemesOnBackground = Color(0xFF000000) // From Schemes/On Background (Variable) Theme: GPC 

val schemesOnSurface = Color(0xFF000000) // From Schemes/On Surface (Variable) Theme: GPC 

val schemesSurfaceContainer = Color(0xFFFAFAFA) // From Schemes/Surface Container (Variable) Theme: GPC 

val schemesError = Color(0xFFBC2F13) // From Schemes/Error (Variable) Theme: GPC 

val schemesOnTertiary = Color(0xFF12227D) // From Schemes/On Tertiary (Variable) Theme: GPC 

val schemesOnPrimary = Color(0xFFFFFFFF) // From Schemes/On Primary (Variable) Theme: GPC 

val schemesOnSurfaceVariant = Color(0xFF4A4A4A) // From Schemes/On Surface Variant (Variable) Theme: GPC 

val schemesSurface = Color(0xFFFFFFFF) // From Schemes/Surface (Variable) Theme: GPC 

val shapesLarge = 4 // From Shapes/Large (Variable) Theme: GPC 

val schemesBackground = Color(0xFFFFFFFF) // From Schemes/Background (Variable) Theme: GPC 

val schemesOnSecondaryContainer = Color(0xFF2E2E2E) // From Schemes/On Secondary Container (Variable) Theme: GPC 

val schemesErrorContainer = Color(0xFFFCE7E3) // From Schemes/Error Container (Variable) Theme: GPC 

val schemesSurfaceVariant = Color(0xFFFFFFFF) // From Schemes/Surface Variant (Variable) Theme: GPC 

val shapesMedium = 4 // From Shapes/Medium (Variable) Theme: GPC 

val schemesTertiary = Color(0xFFFEC72F) // From Schemes/Tertiary (Variable) Theme: GPC 

val schemesPrimaryContainer = Color(0xFFECEDF7) // From Schemes/Primary Container (Variable) Theme: GPC 

val strokeDefault = 0.75 // From Stroke/Default (Variable) Theme: GPC 

}

object Repco {
val schemesSecondaryContainer = Color(0xFFECEDF7) // From Schemes/Secondary Container (Variable) Theme: Repco 

val schemesOnSecondary = Color(0xFFFFFFFF) // From Schemes/On Secondary (Variable) Theme: Repco 

val schemesInversePrimary = Color(0xFFECEDF7) // From Schemes/Inverse Primary (Variable) Theme: Repco 

val shapesSmall = 2 // From Shapes/Small (Variable) Theme: Repco 

val shapesExtraSmall = 2 // From Shapes/Extra Small (Variable) Theme: Repco 

val schemesShadow = Color(0xFF000000) // From Schemes/Shadow (Variable) Theme: Repco 

val schemesSurfaceContainerLowest = Color(0xFFFAFAFA) // From Schemes/Surface Container Lowest (Variable) Theme: Repco 

val schemesSurfaceContainerHighest = Color(0xFFECEDF7) // From Schemes/Surface Container Highest (Variable) Theme: Repco 

val shapesExtraLarge = 4 // From Shapes/Extra Large (Variable) Theme: Repco 

val schemesSurfaceContainerLow = Color(0xFFFAFAFA) // From Schemes/Surface Container Low (Variable) Theme: Repco 

val schemesSurfaceBright = Color(0xFFFFFFFF) // From Schemes/Surface Bright (Variable) Theme: Repco 

val schemesScrim = Color(0xFF2E2E2E) // From Schemes/Scrim (Variable) Theme: Repco 

val schemesSecondary = Color(0xFF172366) // From Schemes/Secondary (Variable) Theme: Repco 

val schemesSurfaceContainerHigh = Color(0xFFF7F8FF) // From Schemes/Surface Container High (Variable) Theme: Repco 

val schemesOnErrorContainer = Color(0xFF621B0D) // From Schemes/On Error Container (Variable) Theme: Repco 

val schemesOutline = Color(0xFF4A4A4A) // From Schemes/Outline (Variable) Theme: Repco 

val schemesSurfaceDim = Color(0xFFFAFAFA) // From Schemes/Surface Dim (Variable) Theme: Repco 

val schemesOnError = Color(0xFFFFFFFF) // From Schemes/On Error (Variable) Theme: Repco 

val schemesOutlineVariant = Color(0xFFCECECE) // From Schemes/Outline Variant (Variable) Theme: Repco 

val schemesInverseOnSurface = Color(0xFFFFFFFF) // From Schemes/Inverse On Surface (Variable) Theme: Repco 

val schemesOnTertiaryContainer = Color(0xFF12227D) // From Schemes/On Tertiary Container (Variable) Theme: Repco 

val schemesInverseSurface = Color(0xFF202020) // From Schemes/Inverse Surface (Variable) Theme: Repco 

val schemesOnPrimaryContainer = Color(0xFF2E2E2E) // From Schemes/On Primary Container (Variable) Theme: Repco 

val schemesPrimary = Color(0xFF0C2194) // From Schemes/Primary (Variable) Theme: Repco 

val schemesTertiaryContainer = Color(0xFFFFE397) // From Schemes/Tertiary Container (Variable) Theme: Repco 

val schemesSurfaceTint = Color(0xFF0C2194) // From Schemes/Surface Tint (Variable) Theme: Repco 

val schemesOnBackground = Color(0xFF000000) // From Schemes/On Background (Variable) Theme: Repco 

val schemesOnSurface = Color(0xFF000000) // From Schemes/On Surface (Variable) Theme: Repco 

val schemesSurfaceContainer = Color(0xFFFAFAFA) // From Schemes/Surface Container (Variable) Theme: Repco 

val schemesError = Color(0xFFBC2F13) // From Schemes/Error (Variable) Theme: Repco 

val schemesOnTertiary = Color(0xFF12227D) // From Schemes/On Tertiary (Variable) Theme: Repco 

val schemesOnPrimary = Color(0xFFFFFFFF) // From Schemes/On Primary (Variable) Theme: Repco 

val schemesOnSurfaceVariant = Color(0xFF4A4A4A) // From Schemes/On Surface Variant (Variable) Theme: Repco 

val schemesSurface = Color(0xFFFFFFFF) // From Schemes/Surface (Variable) Theme: Repco 

val shapesLarge = 4 // From Shapes/Large (Variable) Theme: Repco 

val schemesBackground = Color(0xFFFFFFFF) // From Schemes/Background (Variable) Theme: Repco 

val schemesOnSecondaryContainer = Color(0xFF2E2E2E) // From Schemes/On Secondary Container (Variable) Theme: Repco 

val schemesErrorContainer = Color(0xFFFCE7E3) // From Schemes/Error Container (Variable) Theme: Repco 

val schemesSurfaceVariant = Color(0xFFFFFFFF) // From Schemes/Surface Variant (Variable) Theme: Repco 

val shapesMedium = 4 // From Shapes/Medium (Variable) Theme: Repco 

val schemesTertiary = Color(0xFFFEC72F) // From Schemes/Tertiary (Variable) Theme: Repco 

val schemesPrimaryContainer = Color(0xFFECEDF7) // From Schemes/Primary Container (Variable) Theme: Repco 

val strokeDefault = 0.75 // From Stroke/Default (Variable) Theme: Repco 

}

object Mode1 {
val staticBrandDefault = Color(0xFF011EC1) // From static/brand/default (Variable) Theme: Mode 1 

val feedbackErrorDefault = Color(0xFFBC2F13) // From feedback/error/default (Variable) Theme: Mode 1 

val feedbackSuccessDefault = Color(0xFF1D5F43) // From feedback/success/default (Variable) Theme: Mode 1 

val feedbackWarningDefault = Color(0xFF9E6C00) // From feedback/warning/default (Variable) Theme: Mode 1 

val feedbackInfoDefault = Color(0xFF0D74CE) // From feedback/info/default (Variable) Theme: Mode 1 

val neutralDefault = Color(0xFF959595) // From neutral/default (Variable) Theme: Mode 1 

val interactiveIxPrimaryDefault = Color(0xFF011EC1) // From interactive/ixPrimary/default (Variable) Theme: Mode 1 

val staticBrandWeak = Color(0xFFBAC2F0) // From static/brand/weak (Variable) Theme: Mode 1 

val staticBrandWeaker = Color(0xFFD6DAF0) // From static/brand/weaker (Variable) Theme: Mode 1 

val interactiveIxAccentDefault = Color(0xFFFEC72F) // From interactive/ixAccent/default (Variable) Theme: Mode 1 

val staticBrandWeakest = Color(0xFFECEDF7) // From static/brand/weakest (Variable) Theme: Mode 1 

val staticBrandWeakest2x = Color(0xFFF7F8FF) // From static/brand/weakest2x (Variable) Theme: Mode 1 

val staticBrandStrong = Color(0xFF0C2194) // From static/brand/strong (Variable) Theme: Mode 1 

val interactiveIxDestructiveDefault = Color(0xFFE54D2E) // From interactive/ixDestructive/default (Variable) Theme: Mode 1 

val staticBrandStronger = Color(0xFF12227D) // From static/brand/stronger (Variable) Theme: Mode 1 

val staticBrandStrongest = Color(0xFF172366) // From static/brand/strongest (Variable) Theme: Mode 1 

val interactiveIxNeutralDefault = Color(0xFF575757) // From interactive/ixNeutral/default (Variable) Theme: Mode 1 

val staticNeutralDefault = Color(0xFF959595) // From static/neutral/default (Variable) Theme: Mode 1 

val interactiveIxDisabledDefault = Color(0xFFADADAD) // From interactive/ixDisabled/default (Variable) Theme: Mode 1 

val staticNeutralStrong = Color(0xFF4A4A4A) // From static/neutral/strong (Variable) Theme: Mode 1 

val staticNeutralStronger = Color(0xFF2E2E2E) // From static/neutral/stronger (Variable) Theme: Mode 1 

val staticNeutralStrongest = Color(0xFF202020) // From static/neutral/strongest (Variable) Theme: Mode 1 

val staticNeutralWeak = Color(0xFFCECECE) // From static/neutral/weak (Variable) Theme: Mode 1 

val staticNeutralWeaker = Color(0xFFEFEFEF) // From static/neutral/weaker (Variable) Theme: Mode 1 

val staticNeutralWeakest = Color(0xFFFAFAFA) // From static/neutral/weakest (Variable) Theme: Mode 1 

val feedbackErrorWeak = Color(0xFFDD4425) // From feedback/error/weak (Variable) Theme: Mode 1 

val feedbackSuccessWeak = Color(0xFF30A46C) // From feedback/success/weak (Variable) Theme: Mode 1 

val feedbackSuccessWeaker = Color(0xFFD5F0E0) // From feedback/success/weaker (Variable) Theme: Mode 1 

val feedbackErrorWeaker = Color(0xFFFCE7E3) // From feedback/error/weaker (Variable) Theme: Mode 1 

val feedbackSuccessWeakest = Color(0xFFF0FEF4) // From feedback/success/weakest (Variable) Theme: Mode 1 

val feedbackErrorWeakest = Color(0xFFFEF3F1) // From feedback/error/weakest (Variable) Theme: Mode 1 

val feedbackErrorStrong = Color(0xFF79200E) // From feedback/error/strong (Variable) Theme: Mode 1 

val feedbackSuccessStrong = Color(0xFF1B4D38) // From feedback/success/strong (Variable) Theme: Mode 1 

val feedbackSuccessStronger = Color(0xFF1B4D38) // From feedback/success/stronger (Variable) Theme: Mode 1 

val feedbackSuccessStrongest = Color(0xFF193B2D) // From feedback/success/strongest (Variable) Theme: Mode 1 

val feedbackErrorStronger = Color(0xFF621B0D) // From feedback/error/stronger (Variable) Theme: Mode 1 

val feedbackErrorStrongest = Color(0xFF4A160B) // From feedback/error/strongest (Variable) Theme: Mode 1 

val feedbackWarningWeakest = Color(0xFFFFFDDC) // From feedback/warning/weakest (Variable) Theme: Mode 1 

val feedbackInfoWeak = Color(0xFF0090FF) // From feedback/info/weak (Variable) Theme: Mode 1 

val feedbackInfoWeaker = Color(0xFFE1F1FD) // From feedback/info/weaker (Variable) Theme: Mode 1 

val feedbackInfoWeakest = Color(0xFFF1F9FF) // From feedback/info/weakest (Variable) Theme: Mode 1 

val feedbackWarningWeaker = Color(0xFFFFFAB8) // From feedback/warning/weaker (Variable) Theme: Mode 1 

val feedbackWarningWeak = Color(0xFFCFA83A) // From feedback/warning/weak (Variable) Theme: Mode 1 

val feedbackInfoStrong = Color(0xFF0E64B4) // From feedback/info/strong (Variable) Theme: Mode 1 

val feedbackInfoStronger = Color(0xFF0F5399) // From feedback/info/stronger (Variable) Theme: Mode 1 

val feedbackInfoStrongest = Color(0xFF113264) // From feedback/info/strongest (Variable) Theme: Mode 1 

val feedbackWarningStrong = Color(0xFF735410) // From feedback/warning/strong (Variable) Theme: Mode 1 

val feedbackWarningStronger = Color(0xFF5D4818) // From feedback/warning/stronger (Variable) Theme: Mode 1 

val feedbackWarningStrongest = Color(0xFF473B1F) // From feedback/warning/strongest (Variable) Theme: Mode 1 

val interactiveIxAccentWeak = Color(0xFFFFE397) // From interactive/ixAccent/weak (Variable) Theme: Mode 1 

val interactiveIxAccentWeaker = Color(0xFFFFF8E5) // From interactive/ixAccent/weaker (Variable) Theme: Mode 1 

val interactiveIxAccentStrong = Color(0xFFF5A623) // From interactive/ixAccent/strong (Variable) Theme: Mode 1 

val interactiveIxAccentStronger = Color(0xFFDD9620) // From interactive/ixAccent/stronger (Variable) Theme: Mode 1 

val staticNeutralWhite = Color(0xFFFFFFFF) // From static/neutral/white (Variable) Theme: Mode 1 

val staticNeutralBlack = Color(0xFF000000) // From static/neutral/black (Variable) Theme: Mode 1 

}    
}